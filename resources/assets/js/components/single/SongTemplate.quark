import * as quark from "quark-gui";

let InputField = quark.Molecules.FormElements.InputField;
let SelectList = quark.Molecules.FormElements.SelectList;
let DatePicker = quark.Molecules.FormElements.DatePicker;
let Button = quark.Atoms.Buttons.Button;

function createReadOnlyFormElement(formElement) {
    formElement.attributes.push("readonly");
    return formElement;
}

let formElements = {
    title: {
        id: "title",
        name: "title",
        label: "Title",
        type: "text",
        placeholder: "The song title",
        attributes: [
            "required",
            "v-model='data.values.title'"
        ]
    },
    artist: {
        id: "artist",
        name: "artist",
        label: "Artist",
        type: "text",
        placeholder: "The original artist/band",
        attributes: [
            "v-model='data.values.artist'"
        ]
    },
    lyricsBy: {
        id: "lyrics-by",
        name: "lyrics_by",
        label: "Lyrics by",
        type: "text",
        placeholder: "The lyrics author",
        attributes: [
            "v-model='data.values.lyrics_by'"
        ]
    },
    musicBy: {
        id: "music-by",
        name: "music_by",
        label: "Music by",
        type: "text",
        placeholder: "The music composer",
        attributes: [
            "v-model='data.values.music_by'"
        ]
    },
    key: {
        id: "key",
        name: "key",
        label: "Key",
        searchable: true,
        placeholder: "E.g. F, Am, or C#",
        options: require("../../data/musicalKeys.json"),
        attributes: [
            "v-model='data.values.key'"
        ]
    },
    bpm: {
        id: "bpm",
        name: "bpm",
        label: "BPM",
        type: "number",
        placeholder: "Beats Per Minute",
        attributes: [
            "min='0'",
            "v-model='data.values.bpm'"
        ]
    },
    duration: {
        id: "duration",
        name: "duration",
        label: "Duration",
        type: "time",
        placeholder: "03:25",
        attributes: [
            "v-model='data.values.duration'"
        ],
        clockOptions: {
            showHours: false
        }
    },
    intensity: {
        id: "intensity",
        name: "intensity",
        label: "Intensity",
        type: "number",
        placeholder: "1–10 (Ballad–Bebop)",
        attributes: [
            "min='0'",
            "max='10'",
            "v-model='data.values.intensity'"
        ],
    },
    actionButton: {
        create: {
            submit: true,
            theme: 'primary',
            content: 'Create'
        },
        update: {
            submit: true,
            theme: 'primary',
            content: 'Update'
        },
        edit: {
            submit: false,
            theme: 'primary',
            content: 'Edit',
            attributes: [
                "v-bind:href='url'"
            ]
        }
    }
};

let formHtmlElements = {
    title: {
        editable: InputField.getModule(formElements.title),
        readOnly: InputField.getModule(createReadOnlyFormElement(formElements.title))
    },
    artist: {
        editable: InputField.getModule(formElements.artist),
        readOnly: InputField.getModule(createReadOnlyFormElement(formElements.artist))
    },
    lyricsBy: {
        editable: InputField.getModule(formElements.lyricsBy),
        readOnly: InputField.getModule(createReadOnlyFormElement(formElements.lyricsBy))
    },
    musicBy: {
        editable: InputField.getModule(formElements.musicBy),
        readOnly: InputField.getModule(createReadOnlyFormElement(formElements.musicBy))
    },
    key: {
        editable: SelectList.getModule(formElements.key),
        readOnly: SelectList.getModule(createReadOnlyFormElement(formElements.key))
    },
    bpm: {
        editable: InputField.getModule(formElements.bpm),
        readOnly: InputField.getModule(createReadOnlyFormElement(formElements.bpm))
    },
    duration: {
        editable: DatePicker.getModule(formElements.duration),
        readOnly: DatePicker.getModule(createReadOnlyFormElement(formElements.duration))
    },
    intensity: {
        editable: InputField.getModule(formElements.intensity),
        readOnly: InputField.getModule(createReadOnlyFormElement(formElements.intensity))
    },
    actionButton: {
        create: Button.getModule(formElements.actionButton.create),
        update: Button.getModule(formElements.actionButton.update),
        edit: Button.getModule(formElements.actionButton.edit)
    }
};

let template = `
<form method="POST" v-bind:action="url">
    <input v-if="method !== 'GET'" type="hidden" name="_token" value="${window.Laravel.csrfToken}" />
    <input v-if="method == 'PUT'" type="hidden" name="_method" value="PUT" />
    <div v-if="method == 'GET'">${formHtmlElements.title.readOnly}</div><div v-else>${formHtmlElements.title.editable}</div>
    <div v-if="method == 'GET'">${formHtmlElements.artist.readOnly}</div><div v-else>${formHtmlElements.artist.editable}</div>
    <div v-if="method == 'GET'">${formHtmlElements.lyricsBy.readOnly}</div><div v-else>${formHtmlElements.lyricsBy.editable}</div>
    <div v-if="method == 'GET'">${formHtmlElements.musicBy.readOnly}</div><div v-else>${formHtmlElements.musicBy.editable}</div>
    <p v-if="method == 'GET'">
        The following properties are defaults which may be set different for each instance of this song in setlists
    </p>
    <p v-else>
        You may set the following values different every time you add this song to a setlist, but values entered here will be used as default
    </p>
    <div v-if="method == 'GET'">${formHtmlElements.key.readOnly}</div><div v-else>${formHtmlElements.key.editable}</div>
    <div v-if="method == 'GET'">${formHtmlElements.bpm.readOnly}</div><div v-else>${formHtmlElements.bpm.editable}</div>
    <div v-if="method == 'GET'">${formHtmlElements.duration.readOnly}</div><div v-else>${formHtmlElements.duration.editable}</div>
    <div v-if="method == 'GET'">${formHtmlElements.intensity.readOnly}</div><div v-else>${formHtmlElements.intensity.editable}</div>
    <div class="input-group float-right">
        <div v-if="method == 'POST'">${formHtmlElements.actionButton.create}</div>
        <div v-else-if="method == 'PUT'">${formHtmlElements.actionButton.update}</div>
        <div v-else-if="method == 'GET'">${formHtmlElements.actionButton.edit}</div>
    </div>
    <div class="clearfix"></div> 
</form>
`;

export default template;
